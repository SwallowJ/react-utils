!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r(require("@swallowj/logjs"),require("dayjs")):"function"==typeof define&&define.amd?define(["@swallowj/logjs","dayjs"],r):"object"==typeof exports?exports["react-utils-script"]=r(require("@swallowj/logjs"),require("dayjs")):e["react-utils-script"]=r(e["@swallowj/logjs"],e.dayjs)}(global,(function(e,r){return(()=>{var t={822:e=>{function r(e){var r=new Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}r.keys=()=>[],r.resolve=r,r.id=822,e.exports=r},460:r=>{"use strict";r.exports=e},760:e=>{"use strict";e.exports=r}},o={};function n(e){var r=o[e];if(void 0!==r)return r.exports;var s=o[e]={exports:{}};return t[e](s,s.exports,n),s.exports}n.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return n.d(r,{a:r}),r},n.d=(e,r)=>{for(var t in r)n.o(r,t)&&!n.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},n.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var s={};return(()=>{"use strict";n.r(s),n.d(s,{loadModel:()=>v,loadRouter:()=>x});const e=require("fs");var r=n.n(e);const t=require("path");var o=n.n(t);const i=/(namespace)(\S|\s)*(state:)(\S|\s)*(effects:)(\S|\s)*(reducers:)(\S|\s)*(export default).*/,a=e=>{const t=r().readFileSync(e,{encoding:"utf8"});return i.test(t)};var c=n(460),l=n.n(c);const u=require("child_process"),d=require("crypto");var p=n.n(d);n(760);const f=r=>(e.rmSync(r,{force:!0,maxRetries:3}),e.mkdirSync(t.dirname(r),{recursive:!0}),e.createWriteStream(r)),w=new Map,m=l().New({name:"model"}),$=e=>o().resolve(process.cwd(),"src",e),y=(e,t)=>{m.Info(`开始扫描目录列表: ${e}`);const n=[];for(;e.length>0;){const s=e.shift();s&&r().readdirSync(s).forEach((i=>{const c=o().resolve(s,i);r().statSync(c).isFile()?t&&!t.test(i)||/\.[jt]sx?$/.test(o().extname(i))&&a(c)&&n.push(c):e.push(c)}))}return n},v=e=>{const{watch:t=!1,pages:n=$("pages"),output:s=$("@/cli/models"),customes:i=[$("models")],namespace:a="index"}=e||{};if(!r().statSync(n).isDirectory())throw new Error(`${n} 不是一个目录`);i.forEach((e=>{if(!r().existsSync(e))throw new Error(`目录/文件 ${e} 不存在`)}));const c=o().resolve(s,`model/${a}.ts`),l=[...y([...i]),...y([n],/model\.[tj]sx?$/)];if(((e,r)=>{const t=f(e);r.forEach((e=>{const r=e.replace(/\.[jt]sx?$/,"");t.write(`export { default as ${(e=>{let r=w.get(e);r||(r=p().createHash("sha256").update(e).copy().digest("hex").slice(0,8),w.set(e,r));let t="";for(const r of e.split(o().sep).reverse())if("model"!==r){t=r.replace(/\s/g,"_");break}return`${t}_${r}`})(r)} } from "${r}";\n`)})),t.close()})(c,l),t){const e=o().resolve(__dirname,"modellistener");(0,u.fork)(e).send({pages:n,customes:i,output:c,initArry:l})}m.Info("model 加载完成")},j=(e,r,t)=>{const o=new Array(t).fill("\t").join(""),n=new Array(t+1).fill("\t").join("");switch(Object.prototype.toString.call(e)){case"[object String]":return void r?.write(`"${e}",`);case"[object Object]":return r?.write("{\n"),Object.entries(e).forEach((([e,o])=>{r?.write(`${n}${e}: `),j(o,r,t+2)})),void r?.write(`\n${o}},`);case"[object Array]":return r?.write("["),e.forEach((e=>{j(e,r,t+2)})),void r?.write("],");default:return void r?.write(`${e},`)}},h=(e,r,t,n=1,s="/")=>{const i=new Array(n).fill("\t").join(""),a=new Array(n+1).fill("\t").join("");e.forEach((e=>{const c=o().resolve(s,e.path.replace(/^\//,""));r.write(`${i}{\n`),Object.entries(e).forEach((([e,o])=>{switch(e){case"routers":return r.write(`${a}${e}: [\n`),h(o,r,t,n+2,c),void r.write(`${a}],\n`);case"component":return void(t?r.write(`${a}${e}: loadable(() => import("${o}"), options),\n`):r.write(`${a}${e}: require("${o}").default,\n`));case"data":return r.write(`${a}${e}: `),j(o,r,n+1),void r.write("\n");case"exact":return void r.write(`${a}${e}: ${o},\n`);case"redirect":default:return void r.write(`${a}${e}: "${o}",\n`);case"path":return void r.write(`${a}${e}: "${c}",\n`)}})),r?.write(`${i}},\n`)}))},x=e=>{const{routerPath:t,namespace:s="index",output:i,watch:a}=e;if(!r().statSync(t).isFile())throw new Error(`${t} 不存在`);const c=o().resolve(i,`/router/${s}.tsx`),l=n(822)(t).default,d={...e,output:c,routers:l};if((e=>{const{output:r,split:t=!0,loadComponent:o,routers:n}=e;if(t&&!o)throw new Error("loadComponent 不能为空");const s=f(r);t&&(s.write('import React from "react";\n'),s.write('import loadable from "@loadable/component";\n'),s.write(`import Loading from "${o}";\n\n`),s.write("const options = {\n\tfallback: <Loading />,\n};\n\n")),s.write("const routers: Aplication.router[] = [\n"),h(n,s,t),s.write("];\n\nexport default routers;\n"),s.close()})(d),a){const e=o().resolve(__dirname,"routerlistener");(0,u.fork)(e).send(d)}}})(),s})()}));