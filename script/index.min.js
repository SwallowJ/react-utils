!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r(require("dayjs"),require("@swallowj/logjs")):"function"==typeof define&&define.amd?define(["dayjs","@swallowj/logjs"],r):"object"==typeof exports?exports["react-utils-script"]=r(require("dayjs"),require("@swallowj/logjs")):e["react-utils-script"]=r(e.dayjs,e["@swallowj/logjs"])}(global,(function(e,r){return(()=>{"use strict";var t={460:e=>{e.exports=r},760:r=>{r.exports=e}},o={};function s(e){var r=o[e];if(void 0!==r)return r.exports;var n=o[e]={exports:{}};return t[e](n,n.exports,s),n.exports}s.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return s.d(r,{a:r}),r},s.d=(e,r)=>{for(var t in r)s.o(r,t)&&!s.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},s.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};return(()=>{s.r(n),s.d(n,{loadModel:()=>p});const e=require("fs");var r=s(760),t=s.n(r);const o=require("path"),a=require("crypto");var c=s(460);const i=s.n(c)().New({name:"model"}),l=e=>o.resolve(process.cwd(),"src",e),d=e=>e.replace(/\.[jt]sx?$/,""),u=/(namespace)(\S|\s)*(state:)(\S|\s)*(effects:)(\S|\s)*(reducers:)(\S|\s)*(export default).*/,f=(r,t)=>{i.Info(`开始扫描目录列表: ${r}`);const s=[];for(;r.length>0;){const n=r.shift();n&&e.readdirSync(n).forEach((a=>{const c=o.resolve(n,a);var i;e.statSync(c).isFile()?t&&!t.test(a)||/\.[jt]sx?$/.test(o.extname(a))&&(i=e.readFileSync(c,{encoding:"utf8"}),u.test(i))&&s.push(c):r.push(c)}))}return s},p=r=>{const{watch:s=!1,pages:n=l("pages"),output:c=l("models.ts"),customes:u=[l("models")]}=r||{};if(!e.statSync(n).isDirectory())throw new Error(`${n} 不是一个目录`);u.forEach((r=>{if(!e.existsSync(r))throw new Error(`目录/文件 ${r} 不存在`)}));const p=[...f([n],/model\.[tj]sx?$/),...f(u)],m=(y=c,e.rmSync(y,{force:!0,maxRetries:3}),e.mkdirSync(o.dirname(y),{recursive:!0}),e.createWriteStream(y));var y;const j=t()().add(8,"h").format("YYYY-MM-DD HH:mm:ss.SSS");m.write("/**\n"),m.write(` * Date       ${j}\n`),m.write(" * Desc       model加载\n"),m.write(" */\n\n"),p.forEach((e=>{const r=a.createHash("sha256").update(e).copy().digest("hex").slice(0,8);m.write(`export { default as ${(e=>{for(const r of d(e).split(o.sep).reverse())if("model"!==r)return r;return""})(e)}_${r} } from "${d(e)}";\n`)})),m?.close(),i.Info("model 加载完成")}})(),n})()}));